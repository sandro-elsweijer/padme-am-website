version: 2.1

# Commands are snippets of configuration we can re-use
commands:
  copy_built_files:
    description: "Copy the build site files so we can build the HTML"
    steps:
      # Grab the the built markdown from the last step
      - run:
          name: Copy over built site files
          command: |
            rm -rf published
            cp -r /tmp/workspace/published .

# Jobs define the actual code that CircleCI runs
jobs:
  build_html_demo:
    docker:
      - image: circleci/python:3.6-stretch
    steps:
      # get the right key for github.com
      - run: mkdir -p ~/.ssh
      - run: ssh-keyscan github.com >> ~/.ssh/known_hosts

      # Get our data and merge with upstream
      - checkout

      # Install the packages needed to build our documentation
      # This will depend on your particular package!
      - run: pip install -r requirements.txt

      # Build the page intermediate HTML files and copy all images to the build directory
      - run:
          name: Build page intermediate HTML files
          command: |
            pelican -s pelicanconf.py
            mv output published

      # Persist the specified paths (see https://circleci.com/docs/2.0/workflows/#using-workspaces-to-share-data-among-jobs)
      - persist_to_workspace:
          root: .
          paths:
            - ./published/
            
  build_html_live:
    docker:
      - image: circleci/python:3.6-stretch
    steps:
      # get the right key for github.com
      - run: mkdir -p ~/.ssh
      - run: ssh-keyscan github.com >> ~/.ssh/known_hosts
      
      # Get our data and merge with upstream
      - checkout

      # Install the packages needed to build our documentation
      # This will depend on your particular package!
      - run: pip install -r requirements.txt

      # Build the page intermediate HTML files and copy all images to the build directory
      - run:
          name: Build page intermediate HTML files
          command: pelican -s publishconf.py

      # Persist the specified paths (see https://circleci.com/docs/2.0/workflows/#using-workspaces-to-share-data-among-jobs)
      - persist_to_workspace:
          root: .
          paths:
            - ./published/

  # Build the site to store artifacts
  html_demo:
    docker:
      - image: circleci/python:3.6-stretch
    steps:
      # Attach the workspace that contains the files from our Python step
      - attach_workspace:
          at: /tmp/workspace

      # Copy over the built page files
      - copy_built_files


      # Tell Circle to store the documentation output in a folder we can access later
      - store_artifacts:
          path: published
          destination: html

  # Finally, push the HTML to the gh-pages branch
  html_live:
    machine:
     enabled: true
    steps:
      # Attach the workspace that contains the files from our Python step
      - attach_workspace:
          at: /tmp/workspace

      # Copy over the built page files
      - copy_built_files

      # Install the rsync
      - run:
          name: "Install rsync"
          command: sudo apt install rsync

      # Tell CircleCI to use the SSH key we've set up with permissions to push to the webserver
      - add_ssh_keys:
          fingerprints:
            # The SSH key fingerprint
            - "54:45:ad:2d:50:a5:39:ed:72:dc:f1:05:61:50:27:3f"

      # get the right key for the webserver
      - run: ssh-keyscan -p $SSH_PORT $SSH_HOST >> ~/.ssh/known_hosts

      # Push the `_site` folder to our gh-pages branch for it to go live
      - run:
          name: Copy files to webserver
          command: |
            rsync -avz -e "ssh -p $SSH_PORT" --progress published/ $SSH_USER@$SSH_HOST:/home/padme/html


# These workflows define how the jobs above will run. In our case, we
# want the Ruby jobs to run *after* the Python job has finished so that
# they can use the outputs from the Python page build step.
workflows:
  default:
    jobs:
      # First we build the pages
      - build_html_demo
      - build_html_live

      # Then we build the book HTML to preview
      - html_demo:
          requires:
            - build_html_demo

      # If we're on main branch, also push the HTML live
      - html_live:
          requires:
            - build_html_live
          filters:
            branches:
              only:
                - main

